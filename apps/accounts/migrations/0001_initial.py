# Generated by Django 4.2.2 on 2023-06-15 23:43

import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(help_text='Unique email address (max length = 255 characters)<br>Field name = "<code><small>email</small></code>"', max_length=255, unique=True, verbose_name='Email')),
                ('username', models.CharField(help_text='Unique username associated with the account (max length = 16 characters)<br>Field name = "<code><small>username</small></code>"', max_length=16, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Username must be alphanumeric or contain any of the following: "_"', regex='^[a-zA-Z0-9_]*$'), django.core.validators.MinLengthValidator(limit_value=4, message='Username must be at least 4 characters long')], verbose_name='Username')),
                ('first_name', models.CharField(blank=True, help_text='First name (max length = 120 characters)<br>Field name = "<code><small>first_name</small></code>"', max_length=120, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, help_text='Last name (max length = 120 characters)<br>Field name = "<code><small>last_name</small></code>"', max_length=120, verbose_name='Last name')),
                ('description', models.TextField(blank=True, help_text='User description<br>Field name = "<code><small>description</small></code>"', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active<br>Field name = "<code><small>is_active</small></code>"', verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site<br>Field name = "<code><small>is_staff</small></code>"', verbose_name='Staff status')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site<br>Field name = "<code><small>is_admin</small></code>"', verbose_name='Admin status')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them<br>Field name = "<code><small>is_superuser</small></code>"', verbose_name='Superuser status')),
                ('profile_image', models.ImageField(blank=True, help_text='Profile image<br>Field name = "<code><small>profile_image</small></code>"', null=True, upload_to='profile_images/', verbose_name='Profile image')),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('system', 'System')], default='system', help_text='User website theme.<br>Field name = "<code><small>theme</small></code>"', max_length=55, verbose_name='Theme')),
                ('is_profile_public', models.BooleanField(default=True, help_text='Designates whether the user profile can be viewed by others<br>Field name = "<code><small>is_profile_public</small></code>"', verbose_name='Profile public')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the account<br>Field name = "<code><small>uuid</small></code>"', unique=True, verbose_name='UUID')),
                ('short_uuid', models.CharField(editable=False, help_text='Short unique identifier for the account<br>Field name = "<code><small>short_uuid</small></code>"', max_length=8, unique=True, validators=[django.core.validators.MinLengthValidator(limit_value=8, message='Short UUID must be exactly 8 characters long')], verbose_name='Short UUID')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Server date and time the account was created<br>Field name = "<code><small>date_joined</small></code>"', verbose_name='Date joined')),
                ('last_login', models.DateTimeField(auto_now=True, help_text='Server date and time the account last logged in<br>Field name = "<code><small>last_login</small></code>"', verbose_name='Last login')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
