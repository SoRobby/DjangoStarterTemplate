# Generated by Django 4.2.4 on 2023-10-19 22:03

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "email",
                    models.EmailField(
                        help_text="Unique email address",
                        max_length=255,
                        unique=True,
                        verbose_name="Email",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Unique username associated with the account",
                        max_length=16,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_username",
                                message='Username must be alphanumeric or contain any of the following: "_"',
                                regex="^[a-zA-Z0-9_]*$",
                            ),
                            django.core.validators.MinLengthValidator(
                                limit_value=4,
                                message="Username must be at least 4 characters long",
                            ),
                        ],
                        verbose_name="Username",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the user",
                        max_length=120,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="User bio or description",
                        max_length=500,
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active",
                        verbose_name="Active",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site",
                        verbose_name="Staff status",
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site",
                        verbose_name="Admin status",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them",
                        verbose_name="Superuser status",
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True,
                        help_text="Profile image or avatar",
                        null=True,
                        upload_to="accounts/",
                        verbose_name="Profile image",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("light", "Light"),
                            ("dark", "Dark"),
                            ("system", "System"),
                        ],
                        default="system",
                        help_text="User website theme",
                        max_length=55,
                        verbose_name="Theme",
                    ),
                ),
                (
                    "is_profile_public",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether the user profile can be viewed by others",
                        verbose_name="Profile public",
                    ),
                ),
                (
                    "email_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user has verified their email address",
                        verbose_name="Email verified",
                    ),
                ),
                (
                    "email_verification_token",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Unique identifier for the email verification token",
                        unique=True,
                        verbose_name="Email verification token",
                    ),
                ),
                (
                    "is_marked_for_deletion",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user has marked their account for                                                 deletion",
                        verbose_name="Is marked for deletion",
                    ),
                ),
                (
                    "date_marked_for_deletion",
                    models.DateTimeField(
                        blank=True,
                        help_text="Server date and time when the user deleted their                                                    account",
                        null=True,
                        verbose_name="Date marked for deletion",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the account",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "short_uuid",
                    models.CharField(
                        editable=False,
                        help_text="Short unique identifier for the account",
                        max_length=8,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                limit_value=8,
                                message="Short UUID must be exactly 8 characters long",
                            )
                        ],
                        verbose_name="Short UUID",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time the account was created",
                        verbose_name="Date joined",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time the account last logged in",
                        verbose_name="Last login",
                    ),
                ),
            ],
            options={
                "verbose_name": "Account",
                "verbose_name_plural": "Accounts",
            },
        ),
        migrations.CreateModel(
            name="AccountSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "show_email",
                    models.BooleanField(
                        default=False,
                        help_text="Show or hide the email",
                        verbose_name="Show email",
                    ),
                ),
                (
                    "receive_marketing_emails",
                    models.BooleanField(
                        default=True,
                        help_text="Receive marketing emails",
                        verbose_name="Marketing emails",
                    ),
                ),
                (
                    "receive_weekly_digest_emails",
                    models.BooleanField(
                        default=True,
                        help_text="Receive weekly digest emails",
                        verbose_name="Weekly digest emails",
                    ),
                ),
                (
                    "receive_discovery_emails",
                    models.BooleanField(
                        default=True,
                        help_text="Receive emails about new features and tips",
                        verbose_name="Discovery emails",
                    ),
                ),
                (
                    "receive_site_update_emails",
                    models.BooleanField(
                        default=True,
                        help_text="Receive site update emails",
                        verbose_name="Site updates",
                    ),
                ),
                (
                    "receive_inbox_message_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive notifications when you receive a new                                                              message in your inbox",
                        verbose_name="Inbox message notifications",
                    ),
                ),
                (
                    "receive_announcement_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive notifications about new announcements",
                        verbose_name="Announcement notifications",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the account settings",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Server date and time when the item was created modified",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Server date and time when the item was last modified",
                        verbose_name="Date modified",
                    ),
                ),
                (
                    "account",
                    models.OneToOneField(
                        help_text="Account that is connected to the settings",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Account",
                    ),
                ),
            ],
            options={
                "verbose_name": "Account setting",
                "verbose_name_plural": "Account settings",
            },
        ),
    ]
